this.ButtonBar_mc.AddButtonWithData(this.ViewNamesButton,new ButtonBaseData("$POWER NAMES",[new UserEventData("LShoulder",null)],false));

this.ViewNamesButton.Enabled = true;


PlaceObject3 (BasicButton) Depth: 3 (name: StarNamesButton_mc)

e.g.
this.ToggleHelmetButtonData = new ButtonBaseData(this.InventoryHelmetHideLabel,[new UserEventData("RShoulder",this.ToggleHelmet)]);


Button for galaxystarmapmenu: 
    DefineSprite (751: BasicButton)
    DefineSprite (259: BasicButton_Label)


----
// GalaxyStarMapMenu.swf
// StarMapButtonHintBar
// Class def
public var StarNamesButtonData:ButtonBaseData = null;
public var StarNamesButton:ButtonBase = null;
private var starNamesCallback:Function;
// ...
public function set StarNamesCallback(param1:Function) : *
{
    this.starNamesCallback = param1;
}

private function OnStarNamesEvent() : void
{
    this.starNamesCallback();
}


// PopulateButtons():
// SendHintButton probably dispatches to the game client, which probably doesn't forward it back to the UI
this.StarNamesButtonData = new ButtonBaseData("STAR NAMES",[new UserEventData("",this.OnStarNamesEvent)]);
this.StarNamesButton = ButtonFactory.AddToButtonBar("BasicButton",this.StarNamesButtonData,this.HintBar_mc) as ButtonBase;
this.StarNamesButton.name = "StarNamesButton";
// ...
// add to vector
this.buttonV.push(this.StarNamesButton);
// probably just need to do a call back instead of going through the event UI


// GalaxyStarMapMenu
// Class def
public function OnStarNamesEvent() : *
{
    this.ProcessUserEvent("StarNames",false);
    // this will go to GalaxyStarMapMarkers
}

// onAddedToStage
this.ButtonHintBar_mc.StarNamesCallback = this.OnStarNamesEvent;


// GalaxyStarMapMarkers.swf
// SystemMarker
// Class def
private var ShouldShowSystemNames = true;

// ProcessUserEvent
if (param1 == "StarNames"))
{
    // should have a ToggleNames(bool) on SystemMarker
    return true;
}